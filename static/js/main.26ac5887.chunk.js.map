{"version":3,"sources":["NewTodoForm.js","Todo.js","TodoList.js","App.js","serviceWorker.js","index.js"],"names":["NewTodoForm","props","state","task","handleChange","bind","handleSubmit","evt","this","setState","target","name","value","preventDefault","addTodo","id","uuid","completed","className","onSubmit","htmlFor","placeholder","required","type","onChange","Component","Todo","isEditing","handleRemove","toggleForm","handleUpdate","handleToggle","toggleCompletion","updateTodo","console","log","removeTodo","onClick","class","TodoList","tasks","updatedTask","updatedTodos","map","filter","key","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.26ac5887.chunk.js","sourcesContent":["import React, {Component} from \"react\";\nimport uuid from \"uuid/v4\";\nimport \"./NewTodoForm.css\";\n\nclass NewTodoForm extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            task: \"\"\n        }\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n    handleChange(evt){\n        this.setState({\n            [evt.target.name]: evt.target.value\n        })\n    }\n\n    handleSubmit(evt){\n        evt.preventDefault();\n        this.props.addTodo({...this.state, id: uuid(), completed: false});\n        this.setState({\n            task: \"\"\n        })\n    }\n\n    render(){\n        return(\n            <form className=\"NewTodoForm\" onSubmit={this.handleSubmit}>\n            <label htmlFor=\"task\" >New Todo:</label>    \n            <input \n            id=\"task\"\n            placeholder=\"write new todo\"\n            required\n            type=\"text\"\n            name=\"task\"\n            value={this.state.task}\n            onChange={this.handleChange} /> \n            </form>\n           \n        )\n    }\n}\nexport default NewTodoForm;","import React, {Component} from \"react\";\nimport \"./Todo.css\"\n\nclass Todo extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            isEditing: false,\n            task: this.props.task\n        }\n        this.handleRemove = this.handleRemove.bind(this);\n        this.toggleForm = this.toggleForm.bind(this);\n        this.handleUpdate = this.handleUpdate.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleToggle = this.handleToggle.bind(this);\n    }\n\n    handleToggle(){\n        this.props.toggleCompletion(this.props.id)\n    }\n\n    toggleForm(){\n        this.setState({\n            isEditing: !this.state.isEditing\n        })\n    }\n\n    handleUpdate(evt){\n        evt.preventDefault();\n        this.props.updateTodo(this.props.id, this.state.task)\n        console.log(this.state.task)\n        this.setState({isEditing: !this.state.isEditing})\n    }\n\n    handleRemove(){\n        this.props.removeTodo(this.props.id)\n    }\n\n    handleChange(evt){\n        this.setState({\n            [evt.target.name]: evt.target.value\n        })\n    }\n\n    render(){\n        let result;\n        if(this.state.isEditing){\n            result = (\n                <div className=\"Todo\">\n                    <form className=\"Todo-edit-form\" onSubmit={this.handleUpdate}>\n                        <input \n                        type=\"text\"\n                        name=\"task\"\n                        value={this.state.task}\n                        onChange={this.handleChange} />\n                        <button>Save</button>\n                    </form>\n                </div>\n            )\n        } else {\n            result = (\n                <div className=\"Todo\">\n                <li className={this.props.completed ? \"Todo-task completed\" : \"Todo-task\"} \n                onClick={this.handleToggle} >\n                {this.props.task}   \n                </li>\n                <div className=\"Todo-buttons\">\n                   <button onClick={this.toggleForm}><i class=\"fas fa-pen\"/></button>\n                <button onClick={this.handleRemove}><i class=\"fas fa-trash\"/></button>  \n                </div>\n                \n                \n            </div>\n            )\n        }\n        return result\n    }\n}\nexport default Todo;","import React, {Component} from \"react\";\nimport NewTodoForm from \"./NewTodoForm\"\nimport Todo from \"./Todo\";\nimport \"./TodoList.css\";\n\nclass TodoList extends Component {\n    constructor(props){\n        super(props);\n        this.state ={\n            tasks: []\n        }\n        this.addTodo = this.addTodo.bind(this);\n        this.removeTodo = this.removeTodo.bind(this);\n        this.updateTodo = this.updateTodo.bind(this);\n        this.toggleCompletion = this.toggleCompletion.bind(this);\n    }\n\n    updateTodo(id, updatedTask){\n        const updatedTodos = this.state.tasks.map(task => {\n            if(task.id === id){\n                return{...task, task: updatedTask}\n            }\n            return task;  \n        })\n        this.setState({tasks: updatedTodos})\n    }\n\n    toggleCompletion(id){\n        const updatedTodos = this.state.tasks.map(task => {\n            if(task.id === id){\n                return{...task, completed: !task.completed}\n            }\n            return task;  \n        })\n        this.setState({tasks: updatedTodos})\n    }\n    \n    addTodo(task){\n        this.setState( state => ({\n            tasks: [...state.tasks, task]\n        }))\n    }\n\n    removeTodo(id){\n        this.setState({\n            tasks: this.state.tasks.filter(task => task.id!==id)\n        })}\n\n    render(){\n        const tasks = this.state.tasks.map(task => {\n            return(\n   \n                   <Todo \n                  id={task.id}\n                  key={task.id}\n                  task={task.task}\n                  completed={task.completed}\n                  removeTodo={this.removeTodo}\n                  updateTodo={this.updateTodo}\n                  toggleCompletion={this.toggleCompletion}\n                   />  \n            )\n            }\n        )\n        return(\n            <div className=\"TodoList\">\n              <h1>Todo List! <span>A simple React Todo List App.</span></h1>\n         <NewTodoForm addTodo={this.addTodo} />\n                    <ul>\n                       {tasks} \n                    </ul>\n            </div>\n        )\n    }\n}\nexport default TodoList;","import React, {Component} from 'react';\nimport TodoList from \"./TodoList\"\n\nimport './App.css';\n\nclass App extends Component {\n  render(){\n    return(\n      <div className=\"App\">\n        <TodoList />\n      </div>\n\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}